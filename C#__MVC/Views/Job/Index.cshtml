@using X.PagedList
@model X.PagedList.IPagedList<Job>
@{
	ViewData["Title"] = "Index";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
	.pagination-group {
		display: flex;
		justify-content: center; /* Căn giữa các nút */
		margin: 20px 0; /* Thêm khoảng cách trên dưới cho nhóm phân trang */
		gap: 15px; /* Tạo khoảng cách giữa các nút */
	}

		.pagination-group .btn {
			min-width: 40px; /* Đặt chiều rộng tối thiểu */
			height: 40px; /* Chiều cao */
			text-align: center;
			line-height: 40px; /* Căn giữa text theo chiều dọc */
			border-radius: 8px; /* Bo góc mềm mại */
			border: 1px solid #dcdcdc; /* Viền nhạt */
			background-color: #f9f9f9; /* Màu nền nhạt */
			color: #555; /* Màu chữ */
			font-size: 14px; /* Kích thước chữ vừa phải */
			font-weight: 500; /* Chữ rõ nét hơn */
			transition: all 0.3s ease; /* Hiệu ứng mượt */
			cursor: pointer;
		}

			.pagination-group .btn:hover {
				background-color: #ffffff; /* Nền chuyển sang trắng khi hover */
				border-color: #8bc34a; /* Đổi viền sang màu xanh lá */
				color: #8bc34a; /* Đổi chữ sang màu xanh lá */
				transform: scale(1.05); /* Hiệu ứng phóng to nhẹ */
			}

			.pagination-group .btn.active {
				background-color: #8bc34a; /* Nền xanh lá khi chọn */
				border-color: #8bc34a; /* Viền xanh lá khi chọn */
				color: #ffffff; /* Chữ trắng khi chọn */
				font-weight: bold; /* Chữ đậm */
				transition: all 0.3s ease; /* Hiệu ứng mượt */
			}

				.pagination-group .btn.active:hover {
					background-color: #ffffff; /* Nền chuyển sang trắng khi hover */
					color: #8bc34a; /* Chữ chuyển sang màu xanh lá */
					border-color: #8bc34a; /* Giữ viền xanh lá */
				}


</style>
<div class="inner_page_agile">
	<h3>Jobs</h3>

</div>
<div class="services-breadcrumb_w3layouts">
	<div class="inner_breadcrumb">

		<ul class="short_w3ls" _w3ls="">
			<li><a asp-controller="Home" asp-action="Index">Home</a><span>|</span></li>

			<li>Jobs</li>
		</ul>
	</div>
</div>
<div class="inner_content_info_agileits">
	<div class="container">
		<div class="tittle_head_w3ls">
			<h3 class="tittle">Attractive Job </h3>
		</div>
		<div class="inner_sec_grids_info_w3ls">
			<div class="col-md-8 job_info_left">
				<div class="but_list">
					<div class="bs-example bs-example-tabs" role="tabpanel" data-example-id="togglable-tabs">
						
						<div id="myTabContent" class="tab-content">
							<div role="tabpanel" class="tab-pane fade in active" id="home" aria-labelledby="home-tab">
								<div class="row">
									@await Html.PartialAsync("JobByCategory")
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="btn-group pagination-group" role="group" aria-label="Pagination example">
					@if (Model.PageNumber > 1)
					{
						<a href="@Url.Action("Index", new { page = Model.PageNumber - 1 })" class="btn btn-outline-secondary">
							Previous
						</a>
					}

					@for (int i = 1; i <= Model.PageCount; i++)
					{
						<a href="@Url.Action("Index", new { page = i })" class="btn @(i == Model.PageNumber ? "btn-secondary" : "btn-outline-secondary")">
							@i
						</a>
					}

					@if (Model.PageNumber < Model.PageCount)
					{
						<a href="@Url.Action("Index", new { page = Model.PageNumber + 1 })" class="btn btn-outline-secondary">
							Next
						</a>
					}
				</div>
			</div>
		</div>

		<div class="col-md-4 job_info_right">
			<div class="widget_search">
				<h5 class="widget-title">Search</h5>
				<div class="widget-content">
					<span>I'm looking for a ...</span>
					<select id="category" class="form-control jb_1">
						@await Component.InvokeAsync("FindCategory")
					</select>
					<span>in</span>
					<select id="location" onchange="change_country(this.value)" class="form-control jb_1">
						<option value="" disabled selected>Select Location</option> <!-- Placeholder option -->
						@await Component.InvokeAsync("Location")
					</select>
					<input id="btn-categoryandlocation" type="submit" value="Search">
				</div>
			</div>
			<div class="col_3 permit">
				<h3>Jobs by Category</h3>
				<ul class="list_2">
					@await Component.InvokeAsync("JobByCategory")
				</ul>
			</div>
			@* <div class="col_3 experience">
				<h3>Skills</h3>
				@await Component.InvokeAsync("SkillsByJob")
				<input id="filter-form" type="submit" value="Search">
			</div> *@
		</div>
	</div>
</div>
@section Scripts {
	<script>
		
		$('.id_category').click(function (e) {

			var id = $(this).attr("id");

			$.ajax({
				url: "/Job/JobByCategory",
				data: { id: id },
				success: function (response) {
					$("div#myTabContent").html(response,id);
				}
			});
		});
		$(document).ready(function () {
			// Bắt sự kiện submit của form có id #filter-form
			$('#filter-form').click(function (e) {
				e.preventDefault(); // Ngăn form reload trang

				// Thu thập danh sách skillIds đã chọn
				var skillIds = [];
				$('input[name="skillIds"]:checked').each(function () {
					skillIds.push($(this).val());
				});

				// Gửi request Ajax tới server
				$.ajax({
					url: '@Url.Action("FilterBySkills", "Job")', // Địa chỉ action FilterBySkills
					type: 'POST', // Phương thức POST
					data: { skillIds: skillIds }, // Dữ liệu gửi lên server
					success: function (result) {
						// Đưa kết quả (danh sách công việc) vào div #myTabContent
						$('div#myTabContent').html(result);
					},
					error: function (xhr, status, error) {
						// Hiển thị thông báo lỗi nếu có
						alert('An error occurred: ' + error);
					}
				});
			});
			$(document).ready(function () {
			// Bắt sự kiện khi nhấn nút #btn-categoryandlocation
				$('#btn-categoryandlocation').click(function (e) {
					e.preventDefault(); // Ngăn trang reload

					// Lấy giá trị từ dropdown #category và #location
					var selectedCategory = $('#category').val();
					var selectedLocation = $('#location').val();

					// Kiểm tra nếu người dùng đã chọn category và location
					if (selectedCategory && selectedLocation) {
						// Gửi request Ajax tới server
						$.ajax({
							url: '@Url.Action("FindJobNotKey", "Job")', // Địa chỉ action FilterByCategoryAndLocation
							type: 'POST', // Phương thức POST
							data: { categoryId: selectedCategory, locationId: selectedLocation }, // Dữ liệu gửi lên server
							success: function (result) {
								// Đưa kết quả (danh sách công việc) vào div #myTabContent
								$('div#myTabContent').html(result);
							},
							error: function (xhr, status, error) {
								// Hiển thị thông báo lỗi nếu có
								alert('An error occurred: ' + error);
							}
						});
					} else {
						alert("Please select both Category and Location.");
					}
				});
			});
		});
	</script>
}